spring:
  datasource:
#    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:h2:tcp://localhost/~/wazaaaa
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.h2.Driver
    test: classpath*:sql/test.sql
  jpa:
    hibernate:
      ddl-auto: create
    properties:
#      hibernate:
#        show_sql: true
#        format_sql: true
      logging.level:
        org.hibernate.SQL: debug
#        org.hibernate.type: trace
#        org.hibernate.type:
#          descriptor:
#            sql: trace
    open-in-view: false
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/auth/login/oauth2/code/{registrationId}"
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: naver
            redirect-uri: "{baseUrl}/auth/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - email
              - name
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# JWT
jwt:
  secret: ${JWT_SECRET}
  token:
    access:
      expiration: 3600000 # 1시간 (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h))
      header: Authorization
    refresh:
      expiration: 604800000 # 7일 (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h) * 24L(h -> d) * 7L(d -> w))
      header: Authorization-refresh


# p6spy
logging:
  level:
    p6spy: info
decorator:
  datasource:
    p6spy:
      enable-logging: true
# p6spy